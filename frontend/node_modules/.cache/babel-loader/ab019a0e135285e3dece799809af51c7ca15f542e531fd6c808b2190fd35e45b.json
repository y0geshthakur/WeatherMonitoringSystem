{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshthakur/WeatherMonitoringSystem/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// // src/App.js\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchWeatherData } from \"./services/weatherService\";\n// import \"./App.css\"; // You can style as needed\n// import \"./index.css\"; // You can style as needed\n\n// const App = () => {\n//     const [weatherData, setWeatherData] = useState(null);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const getWeatherData = async () => {\n//             try {\n//                 const data = await fetchWeatherData();\n//                 setWeatherData(data);\n//             } catch (error) {\n//                 setError(\"Could not fetch weather data\");\n//             }\n//         };\n\n//         getWeatherData();\n//         const intervalId = setInterval(getWeatherData, 300000); // Fetch data every 5 minutes\n\n//         return () => clearInterval(intervalId); // Cleanup on unmount\n//     }, []);\n\n//     if (error) {\n//         return <div className=\"error\">{error}</div>;\n//     }\n\n//     if (!weatherData) {\n//         return <div>Loading...</div>;\n//     }\n\n//     const { weatherData: citiesData, processedData } = weatherData;\n\n//     return (\n//         <div className=\"app\">\n//             <h1>Weather Monitoring System</h1>\n//             <h2>Current Weather</h2>\n//             <ul>\n//                 {citiesData.map((city, index) => (\n//                     <li key={index}>\n//                         <h3>{city.name}</h3>\n//                         <p>Main Condition: {city.weather[0].description}</p>\n//                         <p>Current Temperature: {Math.round(city.main.temp - 273.15)} °C</p>\n//                         <p>Feels Like: {Math.round(city.main.feels_like - 273.15)} °C</p>\n//                     </li>\n//                 ))}\n//             </ul>\n//             <h2>Daily Summary</h2>\n//             <p>Average Temperature: {Math.round(processedData.averageTemperature)} °C</p>\n//             <p>Max Temperature: {Math.round(processedData.maxTemperature)} °C</p>\n//             <p>Min Temperature: {Math.round(processedData.minTemperature)} °C</p>\n//             <p>Dominant Condition: {processedData.dominantCondition}</p>\n//         </div>\n//     );\n// };\n\n// export default App;\n\n// src/App.js\nimport React, { useEffect, useState } from 'react';\nimport { fetchWeatherData } from './services/weatherService';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countriesAndCities = {\n  India: ['Delhi', 'Mumbai', 'Chennai', 'Bangalore', 'Kolkata', 'Hyderabad'],\n  USA: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix']\n  // Add more countries and their cities as needed\n};\nfunction App() {\n  _s();\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState('');\n  const handleCountryChange = e => {\n    setSelectedCountry(e.target.value);\n    setSelectedCity(''); // Reset city selection when country changes\n  };\n  const handleCityChange = e => {\n    setSelectedCity(e.target.value);\n  };\n  const handleGetWeather = async () => {\n    if (!selectedCity) {\n      setError('Please select a city.');\n      return;\n    }\n    setError(''); // Clear any previous error\n    try {\n      const data = await fetchWeatherData(selectedCity);\n      setWeatherData(data);\n    } catch (err) {\n      setError('Error fetching weather data. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Monitoring System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCountry,\n        onChange: handleCountryChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select Country--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), Object.keys(countriesAndCities).map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country\n        }, country, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select City:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCity,\n        onChange: handleCityChange,\n        disabled: !selectedCountry,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select City--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), selectedCountry && countriesAndCities[selectedCountry].map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: city,\n          children: city\n        }, city, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetWeather,\n      children: \"Get Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 23\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Weather in \", selectedCity, \", \", selectedCountry]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Main Condition: \", weatherData.weather[0].main]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Temperature: \", weatherData.main.temp, \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Feels Like: \", weatherData.main.feels_like, \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"1T/TCF4UsBPko2ot9osWrGGkLhA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchWeatherData","jsxDEV","_jsxDEV","countriesAndCities","India","USA","App","_s","selectedCountry","setSelectedCountry","selectedCity","setSelectedCity","weatherData","setWeatherData","error","setError","handleCountryChange","e","target","value","handleCityChange","handleGetWeather","data","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","Object","keys","map","country","disabled","city","onClick","weather","main","temp","feels_like","_c","$RefreshReg$"],"sources":["/Users/yogeshthakur/WeatherMonitoringSystem/frontend/src/App.js"],"sourcesContent":["// // src/App.js\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { fetchWeatherData } from \"./services/weatherService\";\n// import \"./App.css\"; // You can style as needed\n// import \"./index.css\"; // You can style as needed\n\n\n// const App = () => {\n//     const [weatherData, setWeatherData] = useState(null);\n//     const [error, setError] = useState(null);\n\n\n//     useEffect(() => {\n//         const getWeatherData = async () => {\n//             try {\n//                 const data = await fetchWeatherData();\n//                 setWeatherData(data);\n//             } catch (error) {\n//                 setError(\"Could not fetch weather data\");\n//             }\n//         };\n\n\n//         getWeatherData();\n//         const intervalId = setInterval(getWeatherData, 300000); // Fetch data every 5 minutes\n\n\n//         return () => clearInterval(intervalId); // Cleanup on unmount\n//     }, []);\n\n\n//     if (error) {\n//         return <div className=\"error\">{error}</div>;\n//     }\n\n\n//     if (!weatherData) {\n//         return <div>Loading...</div>;\n//     }\n\n\n//     const { weatherData: citiesData, processedData } = weatherData;\n\n\n//     return (\n//         <div className=\"app\">\n//             <h1>Weather Monitoring System</h1>\n//             <h2>Current Weather</h2>\n//             <ul>\n//                 {citiesData.map((city, index) => (\n//                     <li key={index}>\n//                         <h3>{city.name}</h3>\n//                         <p>Main Condition: {city.weather[0].description}</p>\n//                         <p>Current Temperature: {Math.round(city.main.temp - 273.15)} °C</p>\n//                         <p>Feels Like: {Math.round(city.main.feels_like - 273.15)} °C</p>\n//                     </li>\n//                 ))}\n//             </ul>\n//             <h2>Daily Summary</h2>\n//             <p>Average Temperature: {Math.round(processedData.averageTemperature)} °C</p>\n//             <p>Max Temperature: {Math.round(processedData.maxTemperature)} °C</p>\n//             <p>Min Temperature: {Math.round(processedData.minTemperature)} °C</p>\n//             <p>Dominant Condition: {processedData.dominantCondition}</p>\n//         </div>\n//     );\n// };\n\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/App.js\nimport React, { useEffect, useState } from 'react';\nimport { fetchWeatherData } from './services/weatherService';\nimport './App.css';\n\nconst countriesAndCities = {\n    India: ['Delhi', 'Mumbai', 'Chennai', 'Bangalore', 'Kolkata', 'Hyderabad'],\n    USA: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'],\n    // Add more countries and their cities as needed\n};\n\nfunction App() {\n    const [selectedCountry, setSelectedCountry] = useState('');\n    const [selectedCity, setSelectedCity] = useState('');\n    const [weatherData, setWeatherData] = useState(null);\n    const [error, setError] = useState('');\n\n    const handleCountryChange = (e) => {\n        setSelectedCountry(e.target.value);\n        setSelectedCity(''); // Reset city selection when country changes\n    };\n\n    const handleCityChange = (e) => {\n        setSelectedCity(e.target.value);\n    };\n\n    const handleGetWeather = async () => {\n        if (!selectedCity) {\n            setError('Please select a city.');\n            return;\n        }\n        setError(''); // Clear any previous error\n        try {\n            const data = await fetchWeatherData(selectedCity);\n            setWeatherData(data);\n        } catch (err) {\n            setError('Error fetching weather data. Please try again.');\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Weather Monitoring System</h1>\n            <div>\n                <label>Select Country:</label>\n                <select value={selectedCountry} onChange={handleCountryChange}>\n                    <option value=\"\">--Select Country--</option>\n                    {Object.keys(countriesAndCities).map((country) => (\n                        <option key={country} value={country}>\n                            {country}\n                        </option>\n                    ))}\n                </select>\n            </div>\n            <div>\n                <label>Select City:</label>\n                <select value={selectedCity} onChange={handleCityChange} disabled={!selectedCountry}>\n                    <option value=\"\">--Select City--</option>\n                    {selectedCountry &&\n                        countriesAndCities[selectedCountry].map((city) => (\n                            <option key={city} value={city}>\n                                {city}\n                            </option>\n                        ))}\n                </select>\n            </div>\n            <button onClick={handleGetWeather}>Get Weather</button>\n\n            {error && <p className=\"error\">{error}</p>}\n\n            {weatherData && (\n                <div>\n                    <h2>Weather in {selectedCity}, {selectedCountry}</h2>\n                    <p>Main Condition: {weatherData.weather[0].main}</p>\n                    <p>Current Temperature: {weatherData.main.temp} °C</p>\n                    <p>Feels Like: {weatherData.main.feels_like} °C</p>\n                    {/* Add more weather details as needed */}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAiBA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,kBAAkB,GAAG;EACvBC,KAAK,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,CAAC;EAC1EC,GAAG,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;EAChE;AACJ,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMiB,mBAAmB,GAAIC,CAAC,IAAK;IAC/BR,kBAAkB,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAClCR,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;EACzB,CAAC;EAED,MAAMS,gBAAgB,GAAIH,CAAC,IAAK;IAC5BN,eAAe,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACX,YAAY,EAAE;MACfK,QAAQ,CAAC,uBAAuB,CAAC;MACjC;IACJ;IACAA,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACd,IAAI;MACA,MAAMO,IAAI,GAAG,MAAMtB,gBAAgB,CAACU,YAAY,CAAC;MACjDG,cAAc,CAACS,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVR,QAAQ,CAAC,gDAAgD,CAAC;IAC9D;EACJ,CAAC;EAED,oBACIb,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBvB,OAAA;MAAAuB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC3B,OAAA;MAAAuB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,EAAO;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9B3B,OAAA;QAAQiB,KAAK,EAAEX,eAAgB;QAACsB,QAAQ,EAAEd,mBAAoB;QAAAS,QAAA,gBAC1DvB,OAAA;UAAQiB,KAAK,EAAC,EAAE;UAAAM,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC3CE,MAAM,CAACC,IAAI,CAAC7B,kBAAkB,CAAC,CAAC8B,GAAG,CAAEC,OAAO,iBACzChC,OAAA;UAAsBiB,KAAK,EAAEe,OAAQ;UAAAT,QAAA,EAChCS;QAAO,GADCA,OAAO;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACX,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACN3B,OAAA;MAAAuB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,EAAO;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3B3B,OAAA;QAAQiB,KAAK,EAAET,YAAa;QAACoB,QAAQ,EAAEV,gBAAiB;QAACe,QAAQ,EAAE,CAAC3B,eAAgB;QAAAiB,QAAA,gBAChFvB,OAAA;UAAQiB,KAAK,EAAC,EAAE;UAAAM,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxCrB,eAAe,IACZL,kBAAkB,CAACK,eAAe,CAAC,CAACyB,GAAG,CAAEG,IAAI,iBACzClC,OAAA;UAAmBiB,KAAK,EAAEiB,IAAK;UAAAX,QAAA,EAC1BW;QAAI,GADIA,IAAI;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAET,CACX,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACN3B,OAAA;MAAQmC,OAAO,EAAEhB,gBAAiB;MAAAI,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAEtDf,KAAK,iBAAIZ,OAAA;MAAGsB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEX;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEzCjB,WAAW,iBACRV,OAAA;MAAAuB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,GAAI,aAAW,EAACf,YAAY,EAAC,IAAE,EAACF,eAAe;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrD3B,OAAA;QAAAuB,QAAA,GAAG,kBAAgB,EAACb,WAAW,CAAC0B,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpD3B,OAAA;QAAAuB,QAAA,GAAG,uBAAqB,EAACb,WAAW,CAAC2B,IAAI,CAACC,IAAI,EAAC,QAAG;MAAA;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACtD3B,OAAA;QAAAuB,QAAA,GAAG,cAAY,EAACb,WAAW,CAAC2B,IAAI,CAACE,UAAU,EAAC,QAAG;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACtB,EAAA,CAtEQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAwEZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}